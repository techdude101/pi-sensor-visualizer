{"version":3,"sources":["components/LineChart.jsx","components/Card.jsx","App.js","index.js"],"names":["LineChart","props","state","labels","label","xData","yData","dateData","chartData","options","numArray","Math","min","apply","max","minY1","round","this","getMinOfArray","yDataLeft","maxY1","getMaxOfArray","minY2","yDataRight","maxY2","setState","color","elements","point","radius","responsive","scales","y","type","position","grid","ticks","display","stepSize","y1","drawOnChartArea","x","datasets","labelLeft","data","fill","backgroundColor","borderColor","tension","yAxisID","labelRight","style","width","title","React","Component","Card","date","Date","toLocaleTimeString","year","month","day","hour","minute","timeZone","className","temperature","humidity","formatDate","dateTime","url","a","fetch","mode","response","getHumidityData","map","item","App","useState","setData","dataRetrieved","setDataRetrieved","getTemperatureData","getDateData","timezone","useEffect","fetchData","then","res","json","result","catch","err","console","error","message","length","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0970d14.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nclass LineChart extends React.Component { \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      labels : [],\r\n      label : null,\r\n      xData : [],\r\n      yData : [],\r\n      dateData : [],\r\n      chartData : {},\r\n      options : {},\r\n    }\r\n  }\r\n\r\n  getMinOfArray(numArray) {\r\n    return Math.min.apply(null, numArray);\r\n  }\r\n  \r\n  getMaxOfArray(numArray) {\r\n    return Math.max.apply(null, numArray);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const minY1 = Math.round(this.getMinOfArray(this.props.yDataLeft) - 1);\r\n    const maxY1 = Math.round(this.getMaxOfArray(this.props.yDataLeft) + 1);\r\n\r\n    const minY2 = Math.round(this.getMinOfArray(this.props.yDataRight) - 1);\r\n    const maxY2 = Math.round(this.getMaxOfArray(this.props.yDataRight) + 1);\r\n\r\n    this.setState({\r\n      options : {\r\n        color: '#FFF',\r\n        elements : {\r\n          point: { radius: 0 }\r\n        },\r\n        responsive: true,\r\n        scales: {\r\n          y: {\r\n            type: 'linear',\r\n            position: 'left',\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n            },\r\n            min: minY1,\r\n            max: maxY1,\r\n          ticks: {\r\n            display: true,\r\n            stepSize: 0.5,\r\n            color: 'rgba(255, 255, 255, 0.7)',\r\n          }\r\n          },\r\n          y1: {\r\n            type: 'linear',\r\n            position: 'right',\r\n            grid: {\r\n                drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n            },\r\n            min: minY2,\r\n            max: maxY2,\r\n          ticks: {\r\n            display: true,\r\n            stepSize: 0.5,\r\n            color: 'rgba(255, 255, 255, 0.7)',\r\n          }\r\n          },\r\n          x: {\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n            },\r\n            ticks: {\r\n              display: true,\r\n              color: 'rgba(255, 255, 255, 0.7)',\r\n            }\r\n          }\r\n        },\r\n      },\r\n\r\n      chartData : {\r\n        labels: this.props.xData,\r\n        color: '#FFF',\r\n        datasets: [\r\n          {\r\n            label: this.props.labelLeft,\r\n            data: this.props.yDataLeft,\r\n            fill: false,\r\n            backgroundColor: '#DFE1E1',\r\n            borderColor: '#D8DBDC',\r\n            color: '#FFF',\r\n            tension: 0.1,\r\n            yAxisID: 'y',\r\n          },\r\n          {\r\n            label: this.props.labelRight,\r\n            position: 'right',\r\n            data: this.props.yDataRight,\r\n            fill: false,\r\n            backgroundColor: '#0F0',\r\n            borderColor: '#0F0',\r\n            tension: 0.1,\r\n            yAxisID: 'y1',\r\n          },\r\n        ],\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{width: \"100%\"}}>\r\n        {this.props.title && \r\n        <h1>{this.props.title}</h1>}\r\n          <Line data={this.state.chartData} options={this.state.options} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LineChart;","import React from 'react';\r\nimport \"..//styles/Card.css\";\r\n\r\nexport default class Card extends React.Component {\r\n    formatDate(date) {\r\n        let d = new Date(date);\r\n        let options = {\r\n            year: 'numeric',\r\n            month: 'numeric',\r\n            day: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            timeZone: 'UTC'\r\n        }\r\n        return d.toLocaleTimeString([], options)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"card-container\">\r\n            <span className=\"card-container__temperature\">{this.props.temperature}â„ƒ</span>\r\n            <span className=\"card-container__humidity\">{this.props.humidity}%</span>\r\n            <span className=\"card-container__date\">{this.formatDate(this.props.dateTime)}</span>\r\n        </div>\r\n    }\r\n}","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport LineChart from \"./components/LineChart\";\nimport Card from \"./components/Card\";\n\nasync function fetchData(url) {\n  const response = await fetch(url, {\n    mode: \"cors\"\n  });\n  return response;\n}\n\nfunction getHumidityData(data) {\n  const humidity = data.map((item) => {\n    return item.humidity;\n  });\n  return humidity;\n}\n\nfunction App() {\n  const url = \"https://pi-sensor-rest-api.herokuapp.com/api/lastday\";\n  \n  const [data, setData] = useState([]);\n  const [dataRetrieved, setDataRetrieved] = useState(false);\n\n  function getTemperatureData(data) {\n    const temperatures = data.map((item) => {\n      return item.temperature;\n    });\n    return temperatures;\n  }\n\n  function getDateData(data) {\n    const dates = data.map((item) => {\n      return formatDate(item.date, item.timezone);\n    });\n    return dates;\n  }\n\n  function formatDate(date, timezone) {\n    let d = new Date(date);\n    let formattedDateTime = \" \" + d.toLocaleTimeString('en-GB', {timeZone: 'UTC'});\n    return formattedDateTime;\n}\n\n  useEffect(() => {\n    fetchData(url)\n    .then(res => res.json())\n    .then((result) => {\n      setData(result);\n      setDataRetrieved(true);\n    })\n    .catch((err) => {\n      console.error(err);\n      setData({message: \"Error retrieving data\"});\n      setDataRetrieved(true);\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"charts-container\">\n        {(function() {\n          if (dataRetrieved === false) {\n            return <h1>Loading...</h1>\n          } else if (data.message) {\n            return <h1>{data.message}</h1>\n          } else {\n            return <>\n            <Card \n              dateTime={data[data.length - 1].date} \n              temperature={data[data.length - 1].temperature}\n              humidity = {data[data.length - 1].humidity}\n            />\n            <LineChart \n            labelLeft=\"Temperature (â„ƒ)\" \n            labelRight=\"Humidity (%)\" \n            xData={getDateData(data)} \n            yDataLeft={getTemperatureData(data)} \n            yDataRight={getHumidityData(data)}\n            title={data[0].description} />\n            {/* <LineChart label=\"Humidity (%)\" xData={getDateData(data)} yData={getHumidityData(data)} title={data[0].description} /> */}\n            </>\n          }\n        })()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}