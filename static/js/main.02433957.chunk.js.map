{"version":3,"sources":["components/LineChart.jsx","components/Card.jsx","App.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","LineChart","props","state","labels","label","xData","yData","dateData","chartData","options","numArray","Math","min","apply","max","minY1","round","this","getMinOfArray","yDataLeft","maxY1","getMaxOfArray","minY2","yDataRight","maxY2","setState","color","elements","point","radius","responsive","scales","y","type","position","grid","ticks","display","stepSize","y1","drawOnChartArea","x","style","width","title","data","name","mode","hovertemplate","yaxis","layout","margin","t","b","l","r","pad","minMaxValues","temperature","autosize","legend","orientation","yanchor","xanchor","xaxis","text","autorange","automargin","yaxis2","range","overlaying","side","hovermode","useResizeHandler","height","React","Component","Card","date","Date","toLocaleTimeString","year","month","day","hour","minute","timeZone","className","humidity","formatDate","dateTime","url","a","fetch","response","App","useState","setData","dataMinMax","setDataMinMax","dataRetrieved","setDataRetrieved","setDate","getDate","startDate","setStartDate","endDate","setEndDate","setUrl","getHumidityData","map","item","getTemperatureData","getDateData","d","getMonth","getFullYear","length","join","datePickerClose","selectedDates","str","instance","newEndDate","newStartDate","updateData","fetchData","then","res","json","result","temperatureData","Infinity","forEach","element","getMinimumValue","getMaximumValue","catch","err","console","error","message","useEffect","description","labelLeft","labelRight","value","maxDate","onClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02433957.chunk.js","sourcesContent":["import React from 'react';\r\n//import { Line } from 'react-chartjs-2';\r\nimport Plotly from \"plotly.js-basic-dist\";\r\n\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nclass LineChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      labels: [],\r\n      label: null,\r\n      xData: [],\r\n      yData: [],\r\n      dateData: [],\r\n      chartData: {},\r\n      options: {},\r\n    }\r\n  }\r\n\r\n  getMinOfArray(numArray) {\r\n    return Math.min.apply(null, numArray);\r\n  }\r\n\r\n  getMaxOfArray(numArray) {\r\n    return Math.max.apply(null, numArray);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const minY1 = Math.round(this.getMinOfArray(this.props.yDataLeft) - 1);\r\n    const maxY1 = Math.round(this.getMaxOfArray(this.props.yDataLeft) + 1);\r\n\r\n    const minY2 = Math.round(this.getMinOfArray(this.props.yDataRight) - 1);\r\n    const maxY2 = Math.round(this.getMaxOfArray(this.props.yDataRight) + 1);\r\n\r\n    this.setState({\r\n      options: {\r\n        color: '#FFF',\r\n        elements: {\r\n          point: { radius: 0 }\r\n        },\r\n        responsive: true,\r\n        scales: {\r\n          y: {\r\n            type: 'linear',\r\n            position: 'left',\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n            },\r\n            min: minY1,\r\n            max: maxY1,\r\n            ticks: {\r\n              display: true,\r\n              stepSize: 0.5,\r\n              color: 'rgba(255, 255, 255, 0.7)',\r\n            }\r\n          },\r\n          y1: {\r\n            type: 'linear',\r\n            position: 'right',\r\n            grid: {\r\n              drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n            },\r\n            min: minY2,\r\n            max: maxY2,\r\n            ticks: {\r\n              display: true,\r\n              stepSize: 0.5,\r\n              color: 'rgba(255, 255, 255, 0.7)',\r\n            }\r\n          },\r\n          x: {\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n            },\r\n            ticks: {\r\n              display: true,\r\n              color: 'rgba(255, 255, 255, 0.7)',\r\n            }\r\n          }\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n        {this.props.title &&\r\n          <h1>{this.props.title}</h1>}\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: this.props.xData,\r\n              y: this.props.yDataLeft,\r\n              name: \"Temperature\",\r\n              mode: 'lines',\r\n              hovertemplate: ' %{y:.1f}&deg;C',\r\n            },\r\n            {\r\n              x: this.props.xData,\r\n              y: this.props.yDataRight,\r\n              yaxis: \"y2\",\r\n              name: \"Humidity\",\r\n              mode: 'lines',\r\n              hovertemplate: ' %{y:.0f}%',\r\n            },\r\n          ]}\r\n          layout={{\r\n            margin: {\r\n              t: 90,\r\n              b: 90,\r\n              l: 70,\r\n              r: 70,\r\n              pad: 10\r\n            },\r\n            // title: \"Title\",\r\n            title: `Min: ${this.props.minMaxValues.temperature.min}&deg;C Max: ${this.props.minMaxValues.temperature.max}&deg;C`,\r\n            autosize: true,\r\n            legend: {\r\n              orientation: \"h\",\r\n              yanchor: \"bottom\",\r\n              y: 1.12,\r\n              xanchor: \"right\",\r\n              x: 1,\r\n            },\r\n            xaxis: {\r\n              title: { text: 'Date/Time' },\r\n              autorange: \"false\",\r\n              type: 'date',\r\n            },\r\n            yaxis: { title: 'Temperature (&deg;C)', automargin: true },\r\n            yaxis2: {\r\n              title: 'Humidity (%)',\r\n              range: [0, 100],\r\n              overlaying: 'y',\r\n              side: 'right',\r\n              automargin: true,\r\n            },\r\n            hovermode: \"x unified\",\r\n          }}\r\n          useResizeHandler={true}\r\n          style={{ width: \"100%\", height: \"100%\" }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LineChart;","import React from 'react';\r\nimport \"..//styles/Card.css\";\r\n\r\nexport default class Card extends React.Component {\r\n    formatDate(date) {\r\n        let d = new Date(date);\r\n        let options = {\r\n            year: 'numeric',\r\n            month: 'numeric',\r\n            day: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            timeZone: 'UTC'\r\n        }\r\n        return d.toLocaleTimeString([], options)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"card-container\">\r\n            <span className=\"card-container__temperature\">{this.props.temperature}℃</span>\r\n            <span className=\"card-container__humidity\">{this.props.humidity}%</span>\r\n            <span className=\"card-container__date\">{this.formatDate(this.props.dateTime)}</span>\r\n        </div>\r\n    }\r\n}","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport LineChart from \"./components/LineChart\";\nimport Card from \"./components/Card\";\n\nimport \"flatpickr/dist/themes/material_green.css\";\nimport Flatpickr from \"react-flatpickr\";\n\nasync function fetchData(url) {\n  const response = await fetch(url, {\n    mode: \"cors\",\n  });\n  return response;\n}\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [dataMinMax, setDataMinMax] = useState(\n    { \n      temperature: { min: 0, max : 0 },\n      humidity: { min: 0, max : 0 }\n   });\n  const [dataRetrieved, setDataRetrieved] = useState(false);\n  const [startDate, setStartDate] = useState(\n    new Date().setDate(new Date().getDate() - 1)\n  );\n  const [endDate, setEndDate] = useState(\n    new Date().setDate(new Date().getDate() + 1)\n  );\n\n  const [url, setUrl] = useState(\n    `https://pi-sensor-rest-api.herokuapp.com/api/range?start=${formatDate(\n      startDate\n    )}&end=${formatDate(endDate)}`\n  );\n\n  function getHumidityData(data) {\n    const humidity = data.map((item) => {\n      return item.humidity;\n    });\n    return humidity;\n  }\n\n  function getTemperatureData(data) {\n    const temperatures = data.map((item) => {\n      return item.temperature;\n    });\n    return temperatures;\n  }\n\n  function getDateData(data) {\n    const dates = data.map((item) => {\n      // return formatDate(item.date, item.timezone);\n      return item.date;\n    });\n    return dates;\n  }\n\n  function formatDate(date) {\n    var d = new Date(date),\n      month = \"\" + (d.getMonth() + 1),\n      day = \"\" + d.getDate(),\n      year = d.getFullYear();\n\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n\n    return [year, month, day].join(\"-\");\n  }\n\n  function getMaximumValue(data) {\n    let max = -Infinity;\n    data.forEach(element => {\n      if (element > max) {\n        max = element;\n      }\n    });\n    return max;\n  }\n\n  function getMinimumValue(data) {\n    let min = Infinity;\n    data.forEach(element => {\n      if (element < min) {\n        min = element;\n      }\n    });\n    return min;\n  }\n\n  function datePickerClose(selectedDates, str, instance) {\n    let newEndDate = selectedDates[0];\n    let newStartDate = selectedDates[0];\n\n    if (selectedDates.length === 2) {\n      newEndDate = selectedDates[1];\n    }\n\n    // console.log(`Start: ${newStartDate}, End: ${newEndDate}`);\n    setStartDate(newStartDate);\n    setEndDate(newEndDate);\n    setUrl(\n      `https://pi-sensor-rest-api.herokuapp.com/api/range?start=${formatDate(\n        newStartDate\n      )}&end=${formatDate(newEndDate)}`\n    );\n  }\n  function updateData() {\n    setDataRetrieved(false);\n    fetchData(url)\n      .then((res) => res.json())\n      .then((result) => {\n        setData(result);\n        setDataRetrieved(true);\n        \n        let temperatureData = getTemperatureData(result);\n        let min = getMinimumValue(temperatureData);\n        let max = getMaximumValue(temperatureData);\n\n        setDataMinMax({\n          ...dataMinMax, \n          temperature: {\n            min: min,\n            max: max\n          }\n        })\n      })\n      .catch((err) => {\n        console.error(err);\n        setData({ message: \"Error retrieving data\" });\n        setDataRetrieved(true);\n      });\n  }\n\n  useEffect(() => {\n    updateData();\n  }, [url]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n        {(function () {\n          if (dataRetrieved === false) {\n            return <h1>Loading...</h1>;\n          } else if (data.message) {\n            return <h1>{data.message}</h1>;\n          } else {\n            return (\n              <div className=\"charts-container\">\n                <h1>{data[0].description}</h1>\n                <Card\n                  dateTime={data[data.length - 1].date}\n                  temperature={data[data.length - 1].temperature}\n                  humidity={data[data.length - 1].humidity}\n                />\n                <LineChart\n                  labelLeft=\"Temperature (℃)\"\n                  labelRight=\"Humidity (%)\"\n                  xData={getDateData(data)}\n                  yDataLeft={getTemperatureData(data)}\n                  yDataRight={getHumidityData(data)}\n                  title={\" \"}\n                  minMaxValues={dataMinMax}\n                />\n                <div className=\"date-control\">\n                  <h2>Date</h2>\n                  <Flatpickr\n                    value={[startDate, endDate]}\n                    options={{\n                      maxDate: new Date().setDate(new Date().getDate() + 1),\n                      mode: \"range\",\n                    }}\n                    onClose={datePickerClose}\n                  />\n                </div>\n              </div>\n            );\n          }\n        })()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}