{"version":3,"sources":["components/LineChart.jsx","components/Card.jsx","App.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","LineChart","props","state","labels","label","xData","yData","dateData","chartData","options","numArray","Math","min","apply","max","minY1","round","this","getMinOfArray","yDataLeft","maxY1","getMaxOfArray","minY2","yDataRight","maxY2","setState","color","elements","point","radius","responsive","scales","y","type","position","grid","ticks","display","stepSize","y1","drawOnChartArea","x","style","width","title","data","name","mode","hovertemplate","yaxis","layout","margin","t","b","l","r","pad","autosize","legend","orientation","yanchor","xanchor","xaxis","text","autorange","automargin","yaxis2","range","overlaying","side","hovermode","React","Component","Card","date","Date","toLocaleTimeString","year","month","day","hour","minute","timeZone","className","temperature","humidity","formatDate","dateTime","url","a","fetch","response","App","useState","setData","dataRetrieved","setDataRetrieved","setDate","getDate","startDate","setStartDate","endDate","setEndDate","setUrl","getHumidityData","map","item","getTemperatureData","getDateData","d","getMonth","getFullYear","length","join","updateData","fetchData","then","res","json","result","catch","err","console","error","message","useEffect","value","maxDate","onClose","selectedDates","str","instance","newEndDate","newStartDate","log","labelLeft","labelRight","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad797251.chunk.js","sourcesContent":["import React from 'react';\r\n//import { Line } from 'react-chartjs-2';\r\nimport Plotly from \"plotly.js-basic-dist\";\r\n\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nclass LineChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      labels: [],\r\n      label: null,\r\n      xData: [],\r\n      yData: [],\r\n      dateData: [],\r\n      chartData: {},\r\n      options: {},\r\n    }\r\n  }\r\n\r\n  getMinOfArray(numArray) {\r\n    return Math.min.apply(null, numArray);\r\n  }\r\n\r\n  getMaxOfArray(numArray) {\r\n    return Math.max.apply(null, numArray);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const minY1 = Math.round(this.getMinOfArray(this.props.yDataLeft) - 1);\r\n    const maxY1 = Math.round(this.getMaxOfArray(this.props.yDataLeft) + 1);\r\n\r\n    const minY2 = Math.round(this.getMinOfArray(this.props.yDataRight) - 1);\r\n    const maxY2 = Math.round(this.getMaxOfArray(this.props.yDataRight) + 1);\r\n\r\n    this.setState({\r\n      options: {\r\n        color: '#FFF',\r\n        elements: {\r\n          point: { radius: 0 }\r\n        },\r\n        responsive: true,\r\n        scales: {\r\n          y: {\r\n            type: 'linear',\r\n            position: 'left',\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n            },\r\n            min: minY1,\r\n            max: maxY1,\r\n            ticks: {\r\n              display: true,\r\n              stepSize: 0.5,\r\n              color: 'rgba(255, 255, 255, 0.7)',\r\n            }\r\n          },\r\n          y1: {\r\n            type: 'linear',\r\n            position: 'right',\r\n            grid: {\r\n              drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n            },\r\n            min: minY2,\r\n            max: maxY2,\r\n            ticks: {\r\n              display: true,\r\n              stepSize: 0.5,\r\n              color: 'rgba(255, 255, 255, 0.7)',\r\n            }\r\n          },\r\n          x: {\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n            },\r\n            ticks: {\r\n              display: true,\r\n              color: 'rgba(255, 255, 255, 0.7)',\r\n            }\r\n          }\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n        {this.props.title &&\r\n          <h1>{this.props.title}</h1>}\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: this.props.xData,\r\n              y: this.props.yDataLeft,\r\n              name: \"Temperature\",\r\n              mode: 'lines',\r\n              hovertemplate: ' %{y:.1f}&deg;C',\r\n            },\r\n            {\r\n              x: this.props.xData,\r\n              y: this.props.yDataRight,\r\n              yaxis: \"y2\",\r\n              name: \"Humidity\",\r\n              mode: 'lines',\r\n              hovertemplate: ' %{y:.0f}%',\r\n            },\r\n          ]}\r\n          layout={{\r\n            margin: {\r\n              t: 90,\r\n              b: 90,\r\n              l: 70,\r\n              r: 70,\r\n              pad: 10\r\n            },\r\n            responsive: \"true\",\r\n            autosize: true,\r\n            legend: {\r\n              orientation: \"h\",\r\n              yanchor: \"bottom\",\r\n              y: 1.12,\r\n              xanchor: \"right\",\r\n              x: 1,\r\n            },\r\n            xaxis: {\r\n              title: { text: 'Date/Time' },\r\n              autorange: \"false\",\r\n              type: 'date',\r\n            //   tickformatstops: [\r\n            //   {\r\n            //     // 0 - 1 Minute\r\n            //     \"dtickrange\": [null, 60 * 1000],\r\n            //     \"value\": \"%H:%M:%S s\"\r\n            //   },\r\n            //   {\r\n            //     // 1 Minute - 1 Hour\r\n            //     \"dtickrange\": [60 * 1000, 60 * 60 * 1000],\r\n            //     \"value\": \"%H:%M:%S\"\r\n            //   },\r\n            //   {\r\n            //     // 1 Hour - 1 Day\r\n            //     \"dtickrange\": [60 * 60 * 1000, 23 * 60 * 60 * 1000],\r\n            //     \"value\": \"%H:%M\"\r\n            //   },\r\n            //   {\r\n            //     // 1 Day - 1 Week\r\n            //     \"dtickrange\": [24 * 60 * 60 * 1000, 7 * 24 * 60 * 60 * 1000],\r\n            //     \"value\": \"%d-%m-%Y\"\r\n            //   },\r\n            //   {\r\n            //     \"dtickrange\": [604800000, \"M1\"],\r\n            //     \"value\": \"%e. %b w\"\r\n            //   },\r\n            //   {\r\n            //     \"dtickrange\": [\"M1\", \"M12\"],\r\n            //     \"value\": \"%b '%y M\"\r\n            //   },\r\n            //   {\r\n            //     \"dtickrange\": [\"M12\", null],\r\n            //     \"value\": \"%Y Y\"\r\n            //   }\r\n            // ]\r\n            },\r\n            yaxis: { title: 'Temperature (&deg;C)', automargin: true },\r\n            yaxis2: {\r\n              title: 'Humidity (%)', \r\n              range: [0, 100],\r\n              overlaying: 'y',\r\n              side: 'right',\r\n              automargin: true,\r\n            },\r\n            hovermode: \"x unified\",\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LineChart;","import React from 'react';\r\nimport \"..//styles/Card.css\";\r\n\r\nexport default class Card extends React.Component {\r\n    formatDate(date) {\r\n        let d = new Date(date);\r\n        let options = {\r\n            year: 'numeric',\r\n            month: 'numeric',\r\n            day: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            timeZone: 'UTC'\r\n        }\r\n        return d.toLocaleTimeString([], options)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"card-container\">\r\n            <span className=\"card-container__temperature\">{this.props.temperature}℃</span>\r\n            <span className=\"card-container__humidity\">{this.props.humidity}%</span>\r\n            <span className=\"card-container__date\">{this.formatDate(this.props.dateTime)}</span>\r\n        </div>\r\n    }\r\n}","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport LineChart from \"./components/LineChart\";\nimport Card from \"./components/Card\";\n\nimport \"flatpickr/dist/themes/material_green.css\";\nimport Flatpickr from \"react-flatpickr\";\n\nasync function fetchData(url) {\n  const response = await fetch(url, {\n    mode: \"cors\"\n  });\n  return response;\n}\n\nfunction App() {\n  // const url = \"https://pi-sensor-rest-api.herokuapp.com/api/lastday\";\n  // const url = \"https://pi-sensor-rest-api.herokuapp.com/api/range?start=2021-09-21&end=2021-09-28\";\n  // let startDate = new Date();\n  // let endDate = new Date();\n  \n  // endDate.setDate(endDate.getDate() + 1);\n  // startDate.setDate(startDate.getDate() - 1);\n\n  // const end = formatDate(endDate);\n  // const start = formatDate(startDate);\n\n  // const url = `https://pi-sensor-rest-api.herokuapp.com/api/range?start=${start}&end=${end}`;\n  \n  const [data, setData] = useState([]);\n  const [dataRetrieved, setDataRetrieved] = useState(false);\n  const [startDate, setStartDate] = useState(new Date().setDate(new Date().getDate() - 1));\n  const [endDate, setEndDate] = useState(new Date().setDate(new Date().getDate() + 1));\n  const [url, setUrl] = useState(`https://pi-sensor-rest-api.herokuapp.com/api/range?start=${formatDate(startDate)}&end=${formatDate(endDate)}`)\n\n  function getHumidityData(data) {\n    const humidity = data.map((item) => {\n      return item.humidity;\n    });\n    return humidity;\n  }\n\n  function getTemperatureData(data) {\n    const temperatures = data.map((item) => {\n      return item.temperature;\n    });\n    return temperatures;\n  }\n\n  function getDateData(data) {\n    const dates = data.map((item) => {\n      // return formatDate(item.date, item.timezone);\n      return item.date;\n    });\n    return dates;\n  }\n\n  function formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) \n        month = '0' + month;\n    if (day.length < 2) \n        day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n\nfunction datePickerClose(selectedDates, str, instance) {\n  let newEndDate = selectedDates[0];\n  let newStartDate = selectedDates[0];\n  \n  if (selectedDates.length === 2) {\n    newEndDate = selectedDates[1];\n  }\n  \n  console.log(`Start: ${newStartDate}, End: ${newEndDate}`);\n  setStartDate(newStartDate);\n  setEndDate(newEndDate);\n  setUrl(`https://pi-sensor-rest-api.herokuapp.com/api/range?start=${formatDate(newStartDate)}&end=${formatDate(newEndDate)}`);\n}\nfunction updateData() {\n  setDataRetrieved(false);\n  fetchData(url)\n    .then(res => res.json())\n    .then((result) => {\n      setData(result);\n      setDataRetrieved(true);\n    })\n    .catch((err) => {\n      console.error(err);\n      setData({message: \"Error retrieving data\"});\n      setDataRetrieved(true);\n    })\n}\n\n  useEffect(() => {\n    updateData();\n  }, [url])\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"charts-container\">\n        <div className=\"date-control\">\n          <h2>Date</h2>\n      <Flatpickr\n        value={[startDate, endDate]}\n        options={{ maxDate: new Date().setDate(new Date().getDate() + 1), mode: \"range\"}}\n        onClose={datePickerClose}\n      />\n      </div>\n        {(function() {\n          if (dataRetrieved === false) {\n            return <h1>Loading...</h1>\n          } else if (data.message) {\n            return <h1>{data.message}</h1>\n          } else {\n            return <>\n            <Card \n              dateTime={data[data.length - 1].date} \n              temperature={data[data.length - 1].temperature}\n              humidity = {data[data.length - 1].humidity}\n            />\n            <LineChart \n            labelLeft=\"Temperature (℃)\" \n            labelRight=\"Humidity (%)\" \n            xData={getDateData(data)} \n            yDataLeft={getTemperatureData(data)} \n            yDataRight={getHumidityData(data)}\n            title={data[0].description} />\n            </>\n          }\n        })()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}